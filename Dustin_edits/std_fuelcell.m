function [FC,cath_in,cath_out,anode_out] = std_fuelcell(options,comp_out,anode_in)
%% determine operating condition (air flow) that balances the heat generated for a specified fuel flow and utilization
%% If air flow is reduced too low, making O2 utilization>50%, then suplemental heating is used.
F = 96485.33; %Faraday's Constant in Coulombs/mol
Ru = 8.314; %Universal gas constant, J/mol.K  
T = options.T_fc;
P = comp_out.P;
[E0,dG,dH] = std_potential(T);
[n1,n2] = size(T);
W = 9; %Width of active cell area in cm
L = 9; %Length of active cell area in cm
n = 10; %Number of nodes at which the voltage change is calculated
n_cells = options.SOFC_area.*10000/(W*L); % Number of cells based on total active surface area of 81 cm^2 per cell

i_total = anode_in.H2.*options.spu*2000*F; %total current 
n_in = anode_in.H2 + anode_in.H2O; 
anode_out = anode_in;
anode_out.T = anode_in.T + options.dT_fc;
anode_out.H2 = anode_in.H2 - i_total/(2000*F);
anode_out.H2O = anode_in.H2O + i_total/(2000*F); %Water/Steam Produced by Reaction, mol/s

ion.T = options.T_fc;
ion.P = P; 
ion.O2 = i_total/(4000*F);

cath_in.P = comp_out.P;
cath_in.T = options.T_fc - 0.5*options.dT_fc; 
cath_in.O2 = 10*ion.O2; %initial guess of 10% O2 utilization
cath_in.N2 = cath_in.O2*.79/.21;

comp_out.O2 = cath_in.O2;
comp_out.N2 = cath_in.N2;
%Initial voltage guess from bulk conditions
V =  E0 + Ru*T./(2*F).*log(.85*.15/.15.*(P/100).^0.5) - i_total./(1e4*options.SOFC_area).*options.asr;%estimate of V
asr = zeros(n1,n2,n);
for j = 1:1:n
    asr(:,:,j) = options.asr;
end
X_H2 = zeros(n1,n2,n);   
X_H2O = zeros(n1,n2,n);
X_O2 = zeros(n1,n2,n);
E = zeros(n1,n2,n);

error_Q = 1;
J_int = zeros(n1,n2,n); %Initializing the matrix for Current distribution
while any(any(abs(error_Q)>1e-4))
    i = (ones(n1,n2,n)).*(i_total./(1e4.*options.SOFC_area));%current density distribution per cell
    for k=1:1:n
        J_int(:,:,k) = sum(i(:,:,1:k),3).*(W*L/n); %integral of current density as a function of length, total current thus far
        X_H2(:,:,k) = (anode_in.H2 - J_int(:,:,k)./(2000*F./n_cells))./(n_in); %Concentration of H2 as a function of position and steam concentration
        X_H2O(:,:,k) = 1-X_H2(:,:,k); %Concentration of H20 product as H2 is consumed 
        X_O2(:,:,k) = (cath_in.O2 - J_int(:,:,k)./(4000*F./n_cells))./(net_flow(cath_in) - J_int(:,:,k)./(4000*F./n_cells));
        E(:,:,k) = E0 + Ru*T./(2*F).*log(X_H2(:,:,k).*X_O2(:,:,k)./(X_H2O(:,:,k).*(P/100).^0.5)); %Nernst Potential as a function of product and reactant concentrations
    end
    error = 1;
    while any(any(abs(error)>1e-4)) 
        i = max(0,E-V.*ones(1,1,n))./asr; %new current distribution
        error = (sum(i,3).*options.SOFC_area*1e4/n)./i_total - 1; %error in total current
        error(isnan(error)) = 0;
        error(isinf(error)) = 0;
        V = min(1.4,max(.1,V + .15*error.*(i_total./options.SOFC_area/1e4.*options.asr))); %New average voltage 
    end  
    
    cath_out = cath_in;
    cath_out.T = cath_in.T + options.dT_fc;
    cath_out.O2 = cath_in.O2 - ion.O2;
    Q_preheat = enthalpy(cath_in) - enthalpy(comp_out);%Heat necessary to pre-heat air.
    Q_cath = enthalpy(cath_out) - enthalpy(cath_in) + enthalpy(ion);
    Q_anode = enthalpy(anode_out) - enthalpy(anode_in) - enthalpy(ion) - dH.*i_total./(2000.*F);
    error_Q = (-dH.*i_total./(2000.*F) - V.*i_total./1000 - Q_anode - Q_cath - Q_preheat)./(Q_cath+ Q_preheat);
    
    %% adjust cathode flow to ensure deltaT (if utilization>50%, determine combustion heating)
    need_combustion = (cath_in.O2 == ion.O2*2) & error_Q<0;
    Q_pre_combustor = zeros(n1,n2);
    Q_pre_combustor(need_combustion) = error_Q(need_combustion);
    error_Q(need_combustion) = 0;
    cath_in.O2 = max(ion.O2*2,cath_in.O2.*(1 + error_Q)); 
    cath_in.N2 = cath_in.O2*.79/.21;
    comp_out.O2 = cath_in.O2;
    comp_out.N2 = cath_in.N2;
end
FC.V = V;
FC.Power = V.*i_total./1000; %Electric Power produced by FC, kW
FC.i_total = i_total;
FC.O2 = ion.O2;
FC.O2_util = ion.O2./cath_in.O2;
FC.i_den = FC.i_total./(options.SOFC_area*10000); %A/cm^2
FC.i_Cell = W*L*FC.i_den;%Total amount of current per cell
FC.cell_area = W*L;
FC.Cells = n_cells;
FC.pressure = P;
FC.Q_pre_combustor = Q_pre_combustor;
FC.hrxnmol = -dH; %H2 + 0.5*O2 -->  H2O, Heat Released in kJ/kmol
FC.Qgen = -dH.*i_total./(2000.*F) - V.*i_total./1000; %Heat generated by fuel cell, kW 
FC.Qremove = Q_preheat-Q_pre_combustor;%Heat pipe energy transfer
end

function [E0,dG,dH] = std_potential(T)
F = 96485.33; %Faraday's Constant in Coulombs/mol
[n1,n2] = size(T);
reactant1.H2 = 1*ones(n1,n2); % 1 kmol of H2 for stoichiometric reaction
reactant1.T = T;
reactant2.O2 = 0.5*ones(n1,n2); % 0.5 kmol of O2 for stoichiometric reaction
reactant2.T = T; 
product.H2O = 1*ones(n1,n2); % 1 kmol of H2O as product
product.T = T;
dH = enthalpy(product) - enthalpy(reactant2) - enthalpy(reactant1); 
ds = entropy(product) - entropy(reactant2) - entropy(reactant1); 
dG = dH - T.*ds; 
E0 = -dG/(2*F);
end%Ends function std_potential