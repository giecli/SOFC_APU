function [FC,cath_out,anode_out,A3,A5] = std_fuelcell(options,cath_in,anode_in)
%% determine operating conditions (fuel flow) that results in the specified temperature gradient
F = 96485.33; %Faraday's Constant in Coulombs/mol
Ru = 8.314; %Universal gas constant, J/mol.K  
T = options.T_fc;
P = cath_in.P;
[n1,n2] = size(T);
W = 9; %Width of active cell area in cm
L = 9; %Length of active cell area in cm
n = 10; %Number of nodes at which the voltage change is calculated
reactant1.H2 = 1*ones(n1,n2); % 1 kmol of H2 for stoichiometric reaction
reactant1.T = T;
reactant2.O2 = 0.5*ones(n1,n2); % 0.5 kmol of O2 for stoichiometric reaction
reactant2.T = T; 
product.H2O = 1*ones(n1,n2); % 1 kmol of H2O as product
product.T = T;
dH = enthalpy(product) - enthalpy(reactant2) - enthalpy(reactant1); 
ds = entropy(product) - entropy(reactant2) - entropy(reactant1); 
FC.G = dH - T.*ds; 
FC.cell_area = W*L;
FC.Cells = options.SOFC_area.*10000/FC.cell_area; % Number of cells based on total active surface area of 81 cm^2 per cell
% dH = 0*T;
% for i = 1:1:n2
% %     dS(:,i) = refproparray('s','T',T(:,i),'P',P(:,i),'WATER')*18.01528 - refpropm('s','T',T(:,i),'P',P(:,i),'Hydrogen')*2.016 - .5*refpropm('s','T',T(:,i),'P',P(:,i),'Oxygen')*32;
%     dH(:,i) = refproparray('h','T',T(:,i),'P',P(:,i),'WATER')*18.01528 - refproparray('h','T',T(:,i),'P',P(:,i),'Hydrogen')*2.016 - .5*refproparray('h','T',T(:,i),'P',P(:,i),'Oxygen')*32 - 45839000 - 241826400;%J/kmol
% end
% % E0 = -(dH-T.*dS)/(2000*F)%Reference Voltage
% FC.G = -198141 + (T-900)*(-192652+198141)/(1000-900);
% FC.G(T>1000) = -192652 + (T(T>1000)-1000)*(-187100+192652)/(1100-1000);
E0 = -FC.G/(2*F);

J_int = zeros(n1,n2,n); %Initializing the matrix for Current distribution
FC.hrxnmol = -dH; %H2 + 0.5*O2 -->  H2O, Heat Released in kJ/kmol
A3 = cath_in;
A3.T = options.T_fc - 0.5*options.dT_fc; 
Q_heat_pipe = enthalpy(A3) - enthalpy(cath_in); 
anode_out = anode_in;
FC.H2_supply = anode_in.H2;
FC.H2O_supply = anode_in.H2O;
FC.H2_used = anode_in.H2.*options.spu;
FC.i_total = FC.H2_used*2000*F; %Flow of H2 that reacts
FC.i_den = FC.i_total./(options.SOFC_area*10000); 
FC.n_in = net_flow(anode_in); 
% FC.i
anode_out.T = anode_in.T + options.dT_fc;
anode_out.H2 = anode_in.H2 - FC.H2_used;
anode_out.H2O = anode_in.H2O + FC.H2_used; %Water/Steam Produced by Reaction, mol/s
[~,hanodecheck] = enthalpy(anode_out);
V =  E0 + Ru*T./(2*F).*log(.85*.15/.15.*(P/100).^0.5) - FC.i_total./(1e4*options.SOFC_area).*options.asr;%estimate of V
FC.Qgen =  FC.hrxnmol.*FC.i_total./(2000.*F) - V.*FC.i_total./1000; %Heat generated by fuel cell, kW 
i = (ones(n1,n2,n)).*(FC.i_total./(1e4.*options.SOFC_area)); %Initial current density distribution per cell
Vold = V;
asr = zeros(n1,n2,n);
for j = 1:1:n
    asr(:,:,j) = options.asr;
end
X_H2 = zeros(n1,n2,n);   
X_H2O = zeros(n1,n2,n);
X_O2 = zeros(n1,n2,n);
E = zeros(n1,n2,n);
ion.T = options.T_fc;
ion.P = P; 
ion.O2 = FC.H2_used/2;
Q_ion = enthalpy(ion); %property(ion,'h','kJ');
Q_cath_in = enthalpy(cath_in); % property(cath_in,'h','kJ');
cath_not_bypass = cath_in;
cath_not_bypass.T = options.T_fc + .5*options.dT_fc;
bypass = zeros(n1,n2);
fuel_heat = zeros(n1,n1);
max_bypass = 0.8*(1-ion.O2./cath_in.O2);
A4 = cath_not_bypass;
%bypass = 0;
error_V = 1;
error_Q = 1
counter = 0;

while any(any(abs(error_V)>1e-4))
   i = (ones(n1,n2,n)).*(FC.i_total./(1e4.*options.SOFC_area));
    for k=1:1:n
        J_int(:,:,k) = sum(i(:,:,1:k),3).*(FC.cell_area/n); %integral of current density as a function of length, total current thus far
        X_H2(:,:,k) = (FC.H2_supply - J_int(:,:,k)./(2000*F./FC.Cells))./(FC.n_in); %Concentration of H2 as a function of position and steam concentration
        X_H2O(:,:,k) = 1-X_H2(:,:,k); %Concentration of H20 product as H2 is consumed 
        X_O2(:,:,k) = (cath_in.O2.*(1-bypass) - J_int(:,:,k)./(4000*F./FC.Cells))./(net_flow(cath_in).*(1-bypass) - J_int(:,:,k)./(4000*F./FC.Cells));
        E(:,:,k) = E0 + Ru*T./(2*F).*log(X_H2(:,:,k).*X_O2(:,:,k)./(X_H2O(:,:,k).*(P/100).^0.5)); %Nernst Potential as a function of product and reactant concentrations
    end
    error = max(max(FC.i_total));
    while any(any(abs(error)>(FC.i_total*1e-4))) 
        i = max(0,E-V.*ones(1,1,n))./asr; %new current distribution
        error = (sum(i,3).*options.SOFC_area*1e4/n) - FC.i_total; %error in total current
        error(isnan(error)) = 0;
        error(isinf(error)) = 0;
        V = min(1.4,max(.1,V + .15*(error./options.SOFC_area/1e4.*options.asr))); %New average voltage 
    end  
    error_V = Vold - V;
    Vold = V;
    
    %% adjust bypass to ensure deltaT
    FC.Qgen =  FC.hrxnmol.*FC.i_total./(2000.*F) - V.*FC.i_total./1000; %Heat generated by fuel cell, kW 
    [~,H_anode_out] = enthalpy(anode_out);
    FC.Q_anode = H_anode_out - enthalpy(anode_in) - enthalpy(ion); %property(anode_out,'h','kJ') - property(anode_in,'h','kJ') - Q_ion; %heat removed by anode (kW)
    %Q_cath = FC.Qgen - FC.Q_anode;
    
    cath_not_bypass.O2 = cath_in.O2.*(1-bypass) - ion.O2;
    cath_not_bypass.N2 = cath_in.N2.*(1-bypass);
    A4 = cath_not_bypass;
    cath_not_bypass_check = enthalpy(cath_not_bypass);
    ion_check = enthalpy(ion);
    A3_check = enthalpy(A3); 
    Q_cath_out = enthalpy(cath_not_bypass) - enthalpy(A3) + enthalpy(ion); %Heat removed by 50K temperature differential
    %Q_need = enthalpy(cath_not_bypass) + Q_ion - Q_cath_in.*(1-bypass);%property(cath_not_bypass,'h','kJ') + Q_ion - Q_cath_in.*(1-bypass); %heat required to bring compressor outlet to fc exhaust temp; 
    %T = find_T(cath_not_bypass,enthalpy(cath_not_bypass)); 
    if counter <=1
    FC.Q_bal_1 = (FC.Qgen - FC.Q_anode - Q_cath_out - Q_heat_pipe) ; %Heat generated by FC that may be used to preheat air from state A2 to state A3
    end
    FC.Q_bal = (FC.Qgen - FC.Q_anode - Q_cath_out - Q_heat_pipe);
    % fuel_heat.*FC.hrxnmol
    preheat_air_needed = Q_heat_pipe; %Actual heat required
    A3check = A3;
%     if counter <= 1
A3check.T = find_T(A3,enthalpy(cath_in) + FC.Q_bal_1); %Actual temperature at A3 after absorbing all heat available, includes preheating fuel after secnod pass
%     else
%         A3check.T = find_T(A3,enthalpy(cath_in) + fuel_heat.*FC.hrxnmol);
%     end
%     
%  Q_cath_need = enthalpy(A3) -enthalpy(A3check);
%  Q_cath_ratio = enthalpy(A3)./enthalpy(A3check); 
% if counter < 1
%     for a1 = 1:n1
%         for a2 = 1:n2            
%             if FC.Q_bal(a1,a2) < 0
%                 fuel_heat(a1,a2) = - FC.Q_bal(a1,a2)/FC.hrxnmol(a1,a2);
%                 %FC.Q_bal(a1,a2) = 0;
%                 error_V = 1; 
%             end
%         end
%     end
% end
%  counter = counter + 1;
for b1 = 1:n1
    for b2 = 1:n2
            if FC.Q_bal(b1,b2) > 100
                    FC.H2_supply(b1,b2) = (0.999)*FC.H2_supply(b1,b2);
                    FC.H2_used(b1,b2) = FC.H2_supply(b1,b2)*options.spu(b1,b2);
                    FC.i_total(b1,b2) = FC.H2_used(b1,b2)*2000*F; %Flow of H2 that reacts
                    error_V = 1;
               
            end
        end
    end
counter = counter + 1; 
 
   %bypass = bypass;
    error_Q = (FC.Qgen - FC.Q_anode - Q_cath_out - Q_heat_pipe + fuel_heat.*FC.hrxnmol); %./max(FC.Qgen-FC.Q_anode,(Q_cath_in_stack+ Q_heat_pipe));%error_Q = (Q_need - Q_cath)./max(Q_cath,Q_need);
    %FC.i_total = FC.i_total.*(1 -.2*error_Q);
    %bypass = min(.98*max_bypass,max(0,bypass + max(0.05*error_Q,-(max_bypass-bypass).*(-error_Q))));
    %bypass = bypass + 0.1;
 
    %ion.O2 = cath_in.O2 - FC.i_total./(4000.*F);
end
for a1 = 1:n1
        for a2 = 1:n2            
            if FC.Q_bal_1(a1,a2) < 0
                fuel_heat(a1,a2) = - FC.Q_bal_1(a1,a2)/FC.hrxnmol(a1,a2);
                %FC.Q_bal(a1,a2) = 0;
                error_V = 1; 
            end
        end
end
    FC.Q_bal = FC.Q_bal + fuel_heat.*FC.hrxnmol;

FC.H2_used = FC.H2_used + fuel_heat;
FC.Q_bal = FC.Q_bal;
cath_out = cath_not_bypass; 
cath_out.O2 = max(1e-3*cath_not_bypass.O2,cath_not_bypass.O2 - ion.O2); %changed from cath_in to cath_not_bypass
cath_out.T = cath_not_bypass.T; %find_T(cath_out, enthalpy(cath_in) + fuel_heat.*FC.hrxnmol); 
% A3 = cath_in;
% A3.T = options.T_fc - 0.5*options.dT_fc;
H_cath_outcheck = enthalpy(cath_out);
H_ioncheck = enthalpy(ion) ;
A3_check = enthalpy(A3);
Q_cath_in_stack = enthalpy(cath_out) + enthalpy(ion) - (1-bypass).*enthalpy(A3); %Energy balance between compressor outlet and cathode outlet
%FC.Q_bal = FC.Qgen - FC.Q_anode - Q_cath_in_stack - Q_heat_pipe;
%RC.Q = enthalpy(A3) - enthalpy(cath_in);
% A4 = cath_not_bypass;
% A4.T = cath_not_bypass.T;
%end
%cath_out.T = find_T(cath_out,enthalpy(cath_in) + FC.Q_bal) ; %find_T(cath_out, property(cath_in,'h','kJ') + Q_cath - Q_ion);
FC.V = V;
FC.Power = FC.V.*FC.i_total./1000; %Electric Power produced by FC, kW
FC.O2 = ion.O2;
FC.O2_util = ion.O2./cath_in.O2;
FC.i_den = FC.i_total./(options.SOFC_area*10000); %A/cm^2
FC.i_Cell = FC.cell_area*FC.i_den;%FC.i_total./FC.Cells; %Total amount of current per cell
FC.pressure = P;
FC.bypass = bypass;
%Q_cath_in_stack = enthalpy(cath_out) + enthalpy(ion) - enthalpy(A3);
%FC.Q_remove = FC.Qgen - FC.Q_anode - Q_cath_in_stack;
%A5.T = find_T(A5,enthalpy(cath_in) + FC.Q_remove); 
%RC.Q = enthalpy(A3) - enthalpy(cath_not
end