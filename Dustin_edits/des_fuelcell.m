function [FC,cath_out,anode_out,anode_in] = des_fuelcell(options,cath_in)
%% determine operating conditions (Voltage) that results in the specified temperature gradient for a specified cathode flow
F = 96485.33; %Faraday's Constant in Coulombs/mol
Ru = 8.314; %Universal gas constant, J/mol.K  
T = options.T_fc;
P = cath_in.P;
[n1,n2] = size(T);
W = 9; %Width of active cell area in cm
L = 9; %Length of active cell area in cm
n = 10; %Number of nodes at which the voltage change is calculated
FC.cell_area = W*L;
FC.Cells = options.SOFC_area.*10000/FC.cell_area; % Number of cells based on total active surface area of 81 cm^2 per cell
dH = 0*T;
for i = 1:1:n2
%     dS(:,i) = refproparray('s','T',T(:,i),'P',P(:,i),'WATER')*18.01528 - refpropm('s','T',T(:,i),'P',P(:,i),'Hydrogen')*2.016 - .5*refpropm('s','T',T(:,i),'P',P(:,i),'Oxygen')*32;
    dH(:,i) = refproparray('h','T',T(:,i),'P',P(:,i),'WATER')*18.01528 - refproparray('h','T',T(:,i),'P',P(:,i),'Hydrogen')*2.016 - .5*refproparray('h','T',T(:,i),'P',P(:,i),'Oxygen')*32 - 45839000 - 241826400;%J/kmol
end
% E0 = -(dH-T.*dS)/(2000*F)%Reference Voltage
FC.G = -198141 + (T-900)*(-192652+198141)/(1000-900);
FC.G(T>1000) = -192652 + (T(T>1000)-1000)*(-187100+192652)/(1100-1000);
E0 = -FC.G/(2*F);

J_int = zeros(n1,n2,n); %Initializing the matrix for Current distribution
FC.hrxnmol = -dH/1000; %H2 + 0.5*O2 -->  H2O, Heat Released in kJ/kmol

cath_out = cath_in;
cath_out.T = options.T_fc + .5*options.dT_fc;
Q_cath = property(cath_out,'h','kJ') - property(cath_in,'h','kJ');

anode_in.T = options.T_fc - .5*options.dT_fc;
anode_in.P = P; 
anode_out.T = anode_in.T + options.dT_fc;
anode_out.P = anode_in.P;

ion.T = options.T_fc;
ion.P = P; 

error = 1;
V = .85;
while any(any(abs(error)>1e-3))
    FC.i_total = (E0 + Ru*T./(2*F).*log(.65*.15/.35.*(P/100).^0.5) - V)./options.asr*1e4.*options.SOFC_area; %current estimate using average OCV
    FC.Qgen =  FC.hrxnmol.*FC.i_total./(2000.*F) - V.*FC.i_total./1000; %Heat generated by fuel cell, kW 

    anode_in.H2 = FC.i_total./(2000.*F)./options.spu;
    anode_in.H2O = anode_in.H2.*options.steamratio./(1-options.steamratio);
    anode_out.H2 = anode_in.H2 - FC.i_total./(2000.*F);
    anode_out.H2O = anode_in.H2O + FC.i_total./(2000.*F); %Water/Steam Produced by Reaction, mol/s
    ion.O2 = FC.i_total./(2000.*F)/2;
    Q_anode = property(anode_out,'h','kJ')-property(anode_in,'h','kJ')-property(ion,'h','kJ'); %heat removed by anode (kW)
    
    error = (FC.Qgen - Q_anode - Q_cath)./max(FC.Qgen-Q_anode,Q_cath);
    error(isnan(error)) = 0;
    V = max(.5,min(1.1,V + .3*error.*max(0,(1.12-V))));
end
i = (ones(n1,n2,n)).*(FC.i_total./(1e4.*options.SOFC_area)); %Initial current density distribution per cell
Vold = V;
asr = zeros(n1,n2,n);
for j = 1:1:n
    asr(:,:,j) = options.asr;
end
X_H2 = zeros(n1,n2,n);   
X_H2O = zeros(n1,n2,n);
X_O2 = zeros(n1,n2,n);
E = zeros(n1,n2,n);

error_Q = 1;
while any(any(abs(error_Q)>1e-4))
    FC.H2_used = FC.i_total./(2000.*F); %Flow of H2 that reacts
    FC.H2_supply = FC.H2_used./options.spu;
    FC.H2O_supply = FC.H2_supply.*options.steamratio./(1-options.steamratio);
    FC.n_in = FC.H2_supply + FC.H2O_supply;  
    for k=1:1:n
        J_int(:,:,k) = sum(i(:,:,1:k),3).*(FC.cell_area/n); %integral of current density as a function of length, total current thus far
        X_H2(:,:,k) = (FC.H2_supply - J_int(:,:,k)./(2000*F./FC.Cells))./(FC.n_in); %Concentration of H2 as a function of position and steam concentration
        X_H2O(:,:,k) = 1-X_H2(:,:,k); %Concentration of H20 product as H2 is consumed 
        X_O2(:,:,k) = (cath_in.O2 - J_int(:,:,k)./(4000*F./FC.Cells))./(net_flow(cath_in) - J_int(:,:,k)./(4000*F./FC.Cells));
        E(:,:,k) = E0 + Ru*T./(2*F).*log(X_H2(:,:,k).*X_O2(:,:,k)./(X_H2O(:,:,k).*(P/100).^0.5)); %Nernst Potential as a function of product and reactant concentrations
    end
    error = max(max(FC.i_total));
    while any(any(abs(error)>(FC.i_total*1e-4))) 
        i = max(0,E-V.*ones(1,1,n))./asr; %new current distribution
        error = (sum(i,3).*options.SOFC_area*1e4/n) - FC.i_total; %error in total current
        error(isnan(error)) = 0;
        error(isinf(error)) = 0;
        V = min(1.4,max(.2,V + .4*(error./options.SOFC_area/1e4.*options.asr))); %New average voltage 
    end  
    error_V = Vold - V;
    Vold = V;
    %% adjust H2 used based on cathode exit temperature
    FC.Qgen =  FC.hrxnmol.*FC.i_total./(2000.*F) - V.*FC.i_total./1000; %Heat generated by fuel cell, kW 
    anode_in.H2 = FC.H2_supply;
    anode_in.H2O = FC.H2O_supply;
    anode_out.H2 = anode_in.H2 - FC.H2_used;
    anode_out.H2O = anode_in.H2O + FC.H2_used; %Water/Steam Produced by Reaction, mol/s
    ion.O2 = FC.H2_used/2;
    FC.Q_anode = property(anode_out,'h','kJ')-property(anode_in,'h','kJ')-property(ion,'h','kJ'); %heat removed by anode (kW)
    cath_out.O2 = max(1e-3*cath_in.O2,cath_in.O2 - ion.O2);
    Q_cath = property(cath_out,'h','kJ') + property(ion,'h','kJ') - property(cath_in,'h','kJ');
    error_Q = (Q_cath - (FC.Qgen - FC.Q_anode))./Q_cath;
    FC.i_total = FC.i_total.*(1 + .9*error_Q);
end
FC.V = V;
FC.Power = FC.V.*FC.i_total./1000; %Electric Power produced by FC, kW
FC.O2 = ion.O2;
FC.i_den = FC.i_total./(options.SOFC_area*10000); %A/cm^2
FC.i_Cell = FC.cell_area*FC.i_den;%FC.i_total./FC.Cells; %Total amount of current per cell
FC.pressure = P;
end